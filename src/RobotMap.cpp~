// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "AHRS.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::driveBaserightMotor0;
std::shared_ptr<SpeedController> RobotMap::driveBaserightMotor1;
std::shared_ptr<SpeedController> RobotMap::driveBaseleftMotor2;
std::shared_ptr<SpeedController> RobotMap::driveBaseleftMotor3;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

AHRS* RobotMap::ahrs = NULL;

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    driveBaserightMotor0.reset(new Jaguar(0));
    lw->AddActuator("DriveBase", "rightMotor0", std::static_pointer_cast<Jaguar>(driveBaserightMotor0));
    
    driveBaserightMotor1.reset(new Jaguar(1));
    lw->AddActuator("DriveBase", "rightMotor1", std::static_pointer_cast<Jaguar>(driveBaserightMotor1));
    
    driveBaseleftMotor2.reset(new Jaguar(2));
    lw->AddActuator("DriveBase", "leftMotor2", std::static_pointer_cast<Jaguar>(driveBaseleftMotor2));
    
    driveBaseleftMotor3.reset(new Jaguar(3));
    lw->AddActuator("DriveBase", "leftMotor3", std::static_pointer_cast<Jaguar>(driveBaseleftMotor3));
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


	ahrs = new AHRS(SPI::Port::kMXP);
}
