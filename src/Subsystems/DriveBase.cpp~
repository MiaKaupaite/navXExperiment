// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "DriveBase.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveBase::DriveBase() : Subsystem("DriveBase") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    rightMotor0 = RobotMap::driveBaserightMotor0;
    rightMotor1 = RobotMap::driveBaserightMotor1;
    leftMotor2 = RobotMap::driveBaseleftMotor2;
    leftMotor3 = RobotMap::driveBaseleftMotor3;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS



}

void DriveBase::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


}


// Put methods for controlling this subsystem
// here. Call these from Commands.

float DriveBase::GetNavXAngle(float rawAngle) {
	int count = floor(rawAngle / 360);
	if (rawAngle > 360){
		return rawAngle - 360 * count;
	} else if (rawAngle < -360){
		return rawAngle + 360 * count;
	} else {
		return rawAngle;
	}
}

void DriveBase::Drive(double left, double right) {
		leftMotor2->Set(left);
		leftMotor3->Set(left);
		rightMotor0->Set(right);
		rightMotor1->Set(right);
		//if both positive, going forward; if both negative, going backwards
	}



