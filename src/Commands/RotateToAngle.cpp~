// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robot builder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating auto generated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RotateToAngle.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

RotateToAngle::RotateToAngle(double angle): Command() {
    m_angle = angle;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void RotateToAngle::Initialize() {
	RobotMap::ahrs->ZeroYaw();
}

// Called repeatedly when this Command is scheduled to run
void RotateToAngle::Execute() {
	if (m_angle > 0){
		Robot::driveBase->Drive(.15, .15);
		printf("turning in the positive direction");
	} else if (m_angle < 0) {
		Robot::driveBase->Drive(-.15, -.15);
		printf("turning in the negative direction");
	} else {
		Robot::driveBase->Drive(0,0);
		printf("i'm not set to turn correctly");
	}
}

// Make this return true when this Command no longer needs to run execute()
bool RotateToAngle::IsFinished() {
	if (m_angle > 0 && RobotMap::ahrs->GetYaw() >= m_angle) {
		return true;
	} else if (m_angle < 0 && RobotMap::ahrs->GetYaw() <= m_angle) {
		return true;
	}
    return false;
}

// Called once after isFinished returns true
void RotateToAngle::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void RotateToAngle::Interrupted() {

}
